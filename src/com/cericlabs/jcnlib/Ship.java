package com.cericlabs.jcnlib;


/**
 * Enum containing the possible ship states a player can have.
 */
public enum Ship {
	UNKNOWN,

	WARBIRD,
	JAVELIN,
	SPIDER,
	LEVIATHAN,
	TERRIER,
	WEASEL,
	LANCASTER,
	SHARK,
	SPECTATOR;

////////////////////////////////////////////////////////////////////////////////////////////////////

	private static final Ship[] TRANSLATOR;

	static {
		TRANSLATOR = new Ship[9];

		TRANSLATOR[0] = WARBIRD;
		TRANSLATOR[1] = JAVELIN;
		TRANSLATOR[2] = SPIDER;
		TRANSLATOR[3] = LEVIATHAN;
		TRANSLATOR[4] = TERRIER;
		TRANSLATOR[5] = WEASEL;
		TRANSLATOR[6] = LANCASTER;
		TRANSLATOR[7] = SHARK;
		TRANSLATOR[8] = SPECTATOR;
	}

	/**
	 * Translates an ordinal ship value into a ship enum type. If the value is out of range, it
	 * will return the value UNKNOWN.
	 *
	 * @param ship
	 *	The ordinal ship value.
	 *
	 * @return
	 *	The enumerated type representing the given ordinal value.
	 */
	public static Ship translate(int ship) {
		return (ship < 0 || ship > 8) ? UNKNOWN : TRANSLATOR[ship];
	}

	/**
	 * Translates the given string to a ship enum type.
	 * <p/>
	 * This function operates identically to the Enum.valueOf function, with the exception that it
	 * automatically corrects the case of input value, and captures any errors generated by the
	 * Enum.valueOf function.
	 *
	 * @param ship
	 *	The name of the ship to translate ("WARBIRD", "Javelin", etc.).
	 *
	 * @return
	 *	The enumerated type representing the given ship name.
	 */
	public static Ship translate(String ship) {
		if(ship == null)
			throw new IllegalArgumentException("ship");

		try {
			return Ship.valueOf(Ship.class, ship.toUpperCase());
		} catch(IllegalArgumentException e) {
			return UNKNOWN;
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Returns the cardinal number for this Ship, as defined in Subspace/Continuum (That is,
	 * Warbird = 0, Spectator = 8).
	 *
	 * @return
	 *	The cardinal number of this ship, or -1 if the ship is undefined.
	 */
	public int cardinal() {
		for(int i = 0; i < TRANSLATOR.length; ++i)
			if(TRANSLATOR[i] == this)
				return i;

		return -1;
	}
}